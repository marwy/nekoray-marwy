name: Nekoray build matrix - cmake

on:
  workflow_dispatch:
    inputs:
      tag:
        description: "Release Tag"
        required: true
      publish:
        description: "Publish: If want ignore"
        required: false
      artifact-pack:
        description: "artifact-pack: If want ignore"
        required: false

jobs:
  build-go:
    strategy:
      matrix:
        cross_os: [windows, linux]
        cross_arch: [amd64]
        include:
          - cross_os: public_res
            cross_arch: public_res
      fail-fast: false
    runs-on: ubuntu-latest
    steps:
      - name: Checking out sources
        uses: actions/checkout@v4
      - name: Go Status
        run: git ls-files go | xargs cat | sha1sum > go_status
      - name: Cache Common Download
        id: cache-common
        uses: actions/cache@v4
        with:
          path: artifacts.tgz
          key: CommonCache-${{ matrix.cross_os }}-${{ matrix.cross_arch }}-${{ hashFiles('libs/*.sh', 'go_status', '*.txt') }}
      - name: Install Golang
        if: steps.cache-common.outputs.cache-hit != 'true'
        uses: actions/setup-go@v4
        with:
          go-version: '^1.22'
      - name: Build golang parts
        if: steps.cache-common.outputs.cache-hit != 'true'
        shell: bash
        run: |
          [ ${{ matrix.cross_os }} == public_res ] || ./libs/get_source.sh
          [ ${{ matrix.cross_os }} == public_res ] || GOOS=${{ matrix.cross_os }} GOARCH=${{ matrix.cross_arch }} ./libs/build_go.sh
          if [ "${{ matrix.cross_os }}" == "public_res" ]; then
            ./libs/build_public_res.sh
          fi
      - name: Tar files
        if: steps.cache-common.outputs.cache-hit != 'true'
        run: tar czvf artifacts.tgz ./deployment
      - name: Uploading Artifact
        uses: actions/upload-artifact@v4
        with:
          name: NekoRay-${{ github.sha }}-Common-${{ matrix.cross_os }}-${{ matrix.cross_arch }}
          path: artifacts.tgz

  build-cpp:
    strategy:
      matrix:
        include:
          - platform: windows-2022
            arch: x64
            qt_version: "6.7"
          - platform: ubuntu-22.04
            arch: x64
            qt_version: "5.12"
      fail-fast: false
    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checking out sources
        uses: actions/checkout@v4
        with:
          submodules: "recursive"

      - name: Install MSVC compiler (Windows)
        if: runner.os == 'Windows'
        uses: ilammy/msvc-dev-cmd@v1
        with:
          toolset: 14.2
          arch: ${{ matrix.arch }}

      - name: Windows - Download Custom Qt ${{ matrix.qt_version }} SDK
        shell: bash
        if: runner.os == 'Windows'
        env:
          DL_QT_VER: ${{ matrix.qt_version }}
        run: bash ./libs/download_qtsdk_win.sh

      - name: Install ninja-build tool
        uses: seanmiddleditch/gha-setup-ninja@v4

      - name: Cache Dependencies
        id: cache-deps
        uses: actions/cache@v4
        with:
          path: libs/deps
          key: DepsCache-${{ matrix.platform }}-${{ matrix.arch }}-${{ hashFiles('libs/build_deps_*.sh') }}-Qt${{ matrix.qt_version }}

      - name: Build Dependencies (Windows)
        shell: bash
        if: steps.cache-deps.outputs.cache-hit != 'true' && runner.os == 'Windows'
        run: ./libs/build_deps_all.sh

      - name: Build Dependencies (Linux)
        shell: bash
        if: steps.cache-deps.outputs.cache-hit != 'true' && runner.os == 'Linux'
        run: |
          docker run --rm \
            -v $PWD:/nekoray \
            -w /nekoray \
            ghcr.io/matsuridayo/debian11-qt5:latest \
            bash -c "./libs/build_deps_all.sh"

      - name: Windows - Generate MakeFile and Build
        shell: bash
        if: runner.os == 'Windows'
        env:
          DL_QT_VER: ${{ matrix.qt_version }}
          CC: cl.exe
          CXX: cl.exe
        run: |
          source libs/env_qtsdk.sh $PWD/qtsdk/Qt
          mkdir build
          cd build
          cmake -GNinja -DQT_VERSION_MAJOR=6 -DCMAKE_BUILD_TYPE=Release ..
          ninja -j2
          cd ..
          ./libs/deploy_windows64.sh

      - name: Linux - Generate MakeFile and Build
        shell: bash
        if: runner.os == 'Linux'
        run: |
          docker run --rm \
            -v $PWD:/nekoray \
            -w /nekoray \
            ghcr.io/matsuridayo/debian11-qt5:latest \
            bash -c "mkdir build && pushd build && cmake -GNinja -DCMAKE_BUILD_TYPE=Release .. && ninja && popd && ./libs/deploy_linux64.sh"

      - name: Tar files
        shell: bash
        run: tar czvf artifacts.tgz ./deployment

      - name: Uploading Artifact
        uses: actions/upload-artifact@v4
        with:
          name: NekoRay-${{ github.sha }}-${{ matrix.platform }}-${{ matrix.arch }}-Qt${{ matrix.qt_version }}
          path: artifacts.tgz

  publish:
    name: Pack & Publish Release
    if: github.event.inputs.artifact-pack != 'y'
    runs-on: ubuntu-latest
    needs:
      - build-cpp
      - build-go
    steps:
      - name: Checking out sources
        uses: actions/checkout@v4

      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: download-artifact

      - name: Prepare environment and unpack artifacts
        run: |
          set -e
          # Установка ghr для релизов
          curl -Lo - https://github.com/tcnksm/ghr/releases/download/v0.13.0/ghr_v0.13.0_linux_amd64.tar.gz | tar xzv
          mv ghr*linux_amd64/ghr .
          chmod +x ./ghr
          # Распаковка всех артефактов один раз
          source libs/env_deploy.sh
          find download-artifact -name artifacts.tgz | xargs -I {} tar xzf {} -C .
          # Подготовка директории deployment
          cd deployment
          cp -r public_res/* linux64
          cp -r public_res/* windows64
          rm -rf public_res *.pdb

      - name: Pack Standard Releases (zip)
        run: |
          source ../libs/env_deploy.sh
          cd deployment
          # Пакет для Linux
          mv linux64 nekoray
          zip -r $version_standalone-linux64.zip nekoray
          rm -rf nekoray
          # Пакет для Windows
          mv windows64 nekoray
          zip -r $version_standalone-windows64.zip nekoray
          rm -rf nekoray

      - name: Pack Debian
        run: |
          source libs/env_deploy.sh
          # Повторно распаковываем, так как предыдущий шаг удалил директории
          find download-artifact -path '*/NekoRay-*-ubuntu-*/artifacts.tgz' | xargs -I {} tar xzf {} -C .
          find download-artifact -path '*/NekoRay-*-Common-public_res-*/artifacts.tgz' | xargs -I {} tar xzf {} -C .
          cd deployment
          cp -r public_res/* linux64
          bash ../libs/package_debian.sh ${{ github.event.inputs.tag }}
          mv nekoray.deb $version_standalone-debian-x64.deb
          sudo rm -rf nekoray public_res linux64

      - name: Pack AppImage
        run: |
          source libs/env_deploy.sh
          # Повторно распаковываем
          find download-artifact -path '*/NekoRay-*-ubuntu-*/artifacts.tgz' | xargs -I {} tar xzf {} -C .
          find download-artifact -path '*/NekoRay-*-Common-public_res-*/artifacts.tgz' | xargs -I {} tar xzf {} -C .
          cd deployment
          cp -r public_res/* linux64
          bash ../libs/package_appimage.sh
          mv nekobox-x86_64.AppImage $version_standalone-linux-x64.AppImage

      - name: Clean Up and Upload Final Artifacts
        run: |
          cd deployment
          rm -rf linux64 windows64 public_res *.pdb
        
      - name: Uploading Deployment Artifact
        uses: actions/upload-artifact@v4
        with:
          name: Deployment-${{ github.sha }}
          path: deployment

      - name: Release
        if: github.event.inputs.publish != 'y'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          ./ghr -t "${{ env.GITHUB_TOKEN }}" -n "${{ github.event.inputs.tag }}" -r "${{ github.repository }}" --replace "${{ github.event.inputs.tag }}" deployment/
